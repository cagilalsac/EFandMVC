@model OrderDTO
@*Generated from Custom Template.*@
@*Model namespace using directive should be added to _ViewImports.cshtml.*@

@{
    ViewData["Title"] = "Create Order";
}

<h1>@ViewData["Title"]</h1>

<h4>Order</h4>
<hr />
<div class="row">
    <div class="col-12">
        <form asp-action="Create">

			@* 
				İlgili controller action'ında valide edilecek şifreli bir string oluşturur ve ilgili 
				controller action'ına geçerli isteğin (requrest) mutlaka bu view'dan gönderilmesini sağlar.
			*@
			@Html.AntiForgeryToken()

			@* Validasyon mesajı 1. yöntem: *@
			@* <div class="text-danger">@ViewBag.ErrorMessage</div> *@
			@* Validasyon mesajı 2. yöntem: *@
            <div asp-validation-summary="All" class="text-danger"></div>

            <div class="row mb-3">
                <label asp-for="CustomerId" class="col-2 col-form-label"></label>
				<div class="col-5">
					<input asp-for="CustomerId" class="form-control" />
					<span asp-validation-for="CustomerId" class="text-danger"></span>
				</div>
            </div>

			<!--
				OrderDate özelliğinin değeri Create post action'ında şimdiki tarih
				ve saat üzerinden atanacak.
			-->

            <div class="row mb-3">
                <label asp-for="RequiredDate" class="col-2 col-form-label"></label>
				<div class="col-5">

					<!--
						input'un type'ını text yapıyoruz ki tarayıcının takvimi gelmesin,
						tarayıcının takvimi yerine wwwroot -> lib altına indirdiğimiz
						jQuery DateTimePicker Javascript - CSS kütüphanesi üzerinden
						en aşağıdaki Scripts section'ında datepicker class adına sahip tüm 
						input tag'leri için jQuery DateTimePicker takviminin gelmesini sağlayacağız.
					-->
					<input asp-for="RequiredDate" class="form-control datepicker" type="text" />

					<span asp-validation-for="RequiredDate" class="text-danger"></span>
				</div>
            </div>
            <div class="row mb-3">
                <label asp-for="ShippedDate" class="col-2 col-form-label"></label>
				<div class="col-5">
					<input asp-for="ShippedDate" class="form-control datepicker" type="text" />
					<span asp-validation-for="ShippedDate" class="text-danger"></span>
				</div>
            </div>

			<!-- Ürünler list box'ı (multiple select): -->
			<div class="row mb-3">
				<label asp-for="ProductIdsInput" class="col-2 col-form-label"></label>
				<div class="col-5">

					<!-- 
						select üzerinden çoklu seçim yapılabilmesi için multiple HTML attribute'unu yazıyoruz,
						seçilen ürünlerin ID'leri view'ın DTO modelindeki ProductIdsInput kolleksiyonunu dolduracak,
						select'in option'larını (elemanları) da Orders controller'ının Create get action'ında
						atadığımız ViewBag üzerinden dolduruyoruz, id HTML attribute'unu da select2 verdik
						çünkü bu select HTML tag'ini Select2 Javascript - CSS kütüphanesini kullanarak
						id üzerinden özelleştireceğiz
					-->
					<select multiple asp-for="ProductIdsInput" asp-items="ViewBag.Products" class="form-select" id="select2"></select>

					<!-- 
						eğer form'da ürün seçimi yapılmazsa kullanıcıya ürün seçilmelidir gibi bir validasyon mesajı göstereceğiz,
						ürün seçimi OrderDTO sınıfının ProductIdsInput özelliğindeki Required data annotation'ından dolayı zorunlu	
					-->
					<span asp-validation-for="ProductIdsInput" class="text-danger"></span>

				</div>
			</div>

            <div class="row mb-3">
				<div class="offset-2 col-5">
					<input type="submit" value="Save" class="btn btn-primary" />
					&nbsp;&nbsp;
                    <button type="reset" class="btn btn-outline-primary">Reset</button>
					&nbsp;&nbsp;
					<a asp-action="Index">Back to List</a>
				</div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
	@*
		Her bir view'daki Scripts section'ı (bölümü) içeriği Views -> Shared -> _Layout.cshtml dosyasında 
		en altta RenderSectionAsync methoduna section adı ile aynı ada sahip string parametre gönderilmesi ile yazdırılır.
        jQuery DateTimePicker gibi Javascript - CSS kütüphaneleri wwwroot -> lib seçilip fare ile sağ tıklanarak Add -> Client-Side Library
        tıklanıp örneğin jQuery DateTimePicker için jquery-datetimepicker araması yapılıp çıkan sonuç seçilerek ve jQuery DateTimePicker
        web sitesi (https://xdsoft.net/jqplugins/datetimepicker) üzerinden hem kütüphane adı yazımı hem de versiyonu ile doğru kütüphane
        olduğu kontrol edilerek projeye eklenebilir.
        jQuery DateTimePicker kütüphanesi tüm view'larda kullanılmayacağı için _Layout view'ında eklemek yerine
        sadece sipariş ekleme ve güncelleme sayfalarında kullanılacağı Views -> Orders -> Create ve Views -> Orders -> Edit view'larında
        Scripts section'ına css ve js kütüphaneleri referansları eklenmelidir ve takvim text box'larını jQuery DateTimePicker'a dönüştürecek
        jQuery kodları yazılmalıdır.
        Yukarıdakilerin aynısı select2 (https://select2.org) Javascript - CSS kütüphanesi için de uygulanabilir.
    *@

    <link href="~/lib/jquery-datetimepicker/jquery.datetimepicker.min.css" rel="stylesheet" />
    <script src="~/lib/jquery-datetimepicker/jquery.datetimepicker.full.min.js"></script>
    
	<link href="~/lib/select2/css/select2.min.css" rel="stylesheet" />
    <script src="~/lib/select2/js/select2.min.js"></script>

	<script>
		$(".datepicker").datetimepicker({
			format: 'm/d/Y', // m: month, d: day, y: year
			timepicker: false
		});

		$("#select2").select2();
	</script>

	@*
		ASP.NET Core MVC'de iki çeşit validation vardır:
		1) Server-Side Validation: Yeni bir controller veya view eklenirken Reference script libraries işaretlenmezse view server side validation
		yapacak şekilde oluşturulur. Yani kullanıcı form üzerinden submit butonuna tıkladığında veriler sunucuya gönderilir ve ilgili action'da
		ModelState.IsValid ile valide edilip validasyon hatası varsa model tekrar view'e gönderilerek view'da varsa validation summary
		veya validation message Tag veya HTML Helper'ları üzerinden bu validasyon hataları gösterilir. Tarayıcının sayfa başlığının da bulunduğu tab'ında
		sayfanın sunucudan tekrar gönderildiği başlığın yanındaki icon'ın değişimi üzerinden takip edilebilir, ayrıca tarayıcının refresh (tazeleme)
		butonunun çarpıya dönmesiyle de sayfanın sunucudan tekrar gönderildiği anlaşılabilir.
		2) Client-Side Validation: Yeni bir controller veya view eklenirken Reference script libraries'in işaretlenmesiyle
		aşağıdaki Views -> Shared -> _ValidationScriptsPartial.cshtml partial view'ı ilgili view'a aşağıdaki şekilde eklenir,
		istenirse bu partial view sonradan da ilgili view'da bulunmuyorsa aşağıdaki şekilde eklenebilir. Bu partial view'in içerisindeki
		Javascript referansları üzerinden tarayıcıda Javascript ile sunucuya veri gönderilmeden view'a gönderilen model üzerinden validation yapılır.
	*@
	@* 1. yöntem: HTML Helper *@
	@* @await Html.PartialAsync("_ValidationScriptsPartial") *@
	@* 2. yöntem Tag Helper *@
	<partial name="_ValidationScriptsPartial" />

}


